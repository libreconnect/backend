name: CI/CD Staging Pipeline (CI - Lint, Test, Build, Release)

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.14.0'
      - name: Install dependencies
        run: pnpm install
      - name: Run linter
        run: pnpm run lint
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: libreconnect_api_test
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.14.0'
      - name: Install dependencies
        run: pnpm install
      - name: Run tests
        run: pnpm run test
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.14.0'
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: pnpm run build
  build-and-push:
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
#      - name: Docker meta
#        id: meta
#        uses: docker/metada-action@v5
#        with:
#          images: ghcr.io/libreconnect/backend
#          tags: |
#            latest
      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(echo $GITHUB_REF | sed -n 's/refs\/tags\/v//p')" >> $GITHUB_OUTPUT
      - name: echo github
        run: |
          echo ${{ github.actor }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/backend:${{ steps.extract_version.outputs.VERSION }}
  update-chart:
    runs-on: ubuntu-latest
    needs: [lint, test, build, build-and-push]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: libreconnect/backend
          ref: main
          token: ${{ secrets.PAT }}
      - name: Update helmfile staging
        env:
          VERSION: ${{ needs.build-and-push.outputs.VERSION }}
        run: |
          echo "Version develop qui sera déployé sur le helmfile develop: $VERSION"
          yq -ie ".image.tag=\"$VERSION\"" ./kubernetes/helmfiles/staging/values.yml
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add kubernetes/helmfiles/staging/values.yml
          git commit -m "Update staging values.yml to $VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
